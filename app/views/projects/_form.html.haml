= semantic_ui_form(@project, url: { action: action }) do |f|

  - if action == 'update'
    %button#destroy-project-btn.ui.right.floated.red.button{ type: 'button', 'data-project-id' => @project.id } Destroy

  = f.text :name, placeholder: 'The project name'
  = f.text :description, placeholder: 'Project description, be succinct'
  .two.fields
    = f.text :repository, placeholder: 'The project git repository URL'
    = f.text :linter, placeholder: 'Command run by CLI before create/update a MR', info: 'a script in the project directory that will run before any MR creation or update'

  .field
    %label Project users
    .ui.small.multiple.search.selection.dropdown
      = f.hidden_field('user_ids', value: @project.user_ids.join(','))
      %i.dropdown.icon
      .default.text Select users for this project
      .menu
        - User.pluck(:id, :name, :email).each do |id, name, email|
          .item{ 'data-value' => id }
            %img.avatar{src: gravatar_url(email)}
            = name

  %h4.ui.horizontal.divider.header
    %i.share.alternate.icon
    Jira integration

  .two.fields
    = f.text :jira_username
    = f.password :jira_password, info: 'Stored in plain text!! So make sure this user can only comment in Jira'
  .two.fields
    = f.text :jira_ticket_regexp, info: 'This must capture the Ticket id'
    = f.text :jira_api_url, label: 'Jira API v2 URL', info: 'e.g. https://myjira.com/rest/api/2'

  %h4.ui.horizontal.divider.header
    %i.gitlab.icon
    GitLab CI integration

  = f.text :gitlab_ci_project_url, label: 'Gitlab project URL', info: 'https://my_gitlab.org/my_user/my_project'

  %button.ui.primary.submit.button Create
